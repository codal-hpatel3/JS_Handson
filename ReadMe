# JavaScript Learning Code

Welcome to the **JavaScript Learning Code** repository!  
This project contains hands-on JavaScript code examples to help you learn and practice core JavaScript concepts.

---

## üìÅ Folder Structure

- **JavaScript.js**  
  Entry point with a simple console log.

- **JavaScriptOperators/**
  - `Operators.js`  
    Examples of JavaScript operators: arithmetic, comparison, logical, assignment, and more.

- **JavaScriptVariables/**
  - `Variables.js`  
    Demonstrates variable declarations using `var`, `let`, and `const`, including scope, redeclaration, and reassignment.
  - `DataTypes.js`  
    Shows primitive data types in JavaScript and how to check their types.
  - `ConstObject.js`  
    Explains how `const` works with objects‚Äîproperties can be changed or added, but the object reference cannot be reassigned.

- **JavaScriptObjects/**
  - `JavaScriptObjects.js`  
    Demonstrates how to create and use JavaScript objects, including property access, adding properties, using constructors, defining methods, and iterating over object properties.

- **JavaScriptArrays/**
  - `Arrays.js`  
    Covers array creation, access, and basic operations.
  - `ArrayMethods.js`  
    Demonstrates common array methods such as `push`, `pop`, `shift`, `unshift`, `map`, `filter`, `reduce`, and more.

- **JavaScriptErrors/**
  - `TryCatchInJavaScript.js`  
    Shows how to handle errors in JavaScript using `try...catch` with clear, easy-to-understand examples.

- **JavaScriptAsyncAwait/**
  - `JsAsyncAwait.js`  
    Demonstrates the use of async/await in JavaScript, including easy examples and comparisons with callbacks and promises.

---

## üìö Topics Covered

- Variable declarations: `var`, `let`, `const`
- Variable scope: block, global
- Redeclaration and reassignment rules
- Primitive data types: `string`, `number`, `boolean`, `null`, `undefined`, `symbol`, `bigint`
- Operators: arithmetic, comparison, logical, assignment, strict equality, etc.
- Working with constant objects (`const` with objects)
- Creating and manipulating JavaScript objects
- Object methods and property access
- Object constructors and prototypes
- Iterating over object properties
- Arrays: creation, access, iteration, and common methods
- Error handling with `try...catch`
- Asynchronous JavaScript: callbacks, promises, async/await

---

## ‚ñ∂Ô∏è How to Run the Code

1. **Open any `.js` file** in your favorite editor (e.g., VS Code).
2. **Run the file using Node.js** in your terminal:
   ```sh
   node path/to/your/file.js
   ```
   For example:
   ```sh
   node JavaScriptArrays/Arrays.js
   ```
   Replace the path with the file you want to run.

---